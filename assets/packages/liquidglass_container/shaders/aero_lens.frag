{
  "sksl": {
    "entrypoint": "aero_lens_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform vec2 uSize;\nuniform float uPadding;\nuniform float uCornerRadius;\nuniform float uSmoothness;\nuniform float uRefractiveIndex;\nuniform float uChromaticAberration;\nuniform float uDistortionStrength;\nuniform float uDistortionSlope;\nuniform vec3 uGlassTint;\nuniform float uGlassAlpha;\nuniform shader uTexture;\nuniform half2 uTexture_size;\n\nvec4 fragColor;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nfloat FLT_flutter_local_sdRoundedBox(vec2 p, vec2 b, inout float r)\n{\n    r = min(r, min(b.x, b.y));\n    vec2 q = (abs(p) - b) + vec2(r);\n    return (min(max(q.x, q.y), 0.0) + length(max(q, vec2(0.0)))) - r;\n}\n\nvoid FLT_main()\n{\n    vec2 fragCoord = FLT_flutter_local_FlutterFragCoord();\n    vec2 uv = fragCoord / uSize;\n    vec2 boxCenterPx = uSize / vec2(2.0);\n    vec2 boxHalfSizePx = boxCenterPx - vec2(uPadding);\n    bool _85 = boxHalfSizePx.x < 0.0;\n    bool _92;\n    if (!_85)\n    {\n        _92 = boxHalfSizePx.y < 0.0;\n    }\n    else\n    {\n        _92 = _85;\n    }\n    if (_92)\n    {\n        fragColor = uTexture.eval(uTexture_size * ( uv));\n        return;\n    }\n    vec2 p_1 = fragCoord - boxCenterPx;\n    vec2 param = p_1;\n    vec2 param_1 = boxHalfSizePx;\n    float param_2 = uCornerRadius;\n    float _117 = FLT_flutter_local_sdRoundedBox(param, param_1, param_2);\n    float dist = _117;\n    float alpha = 1.0 - smoothstep(-uSmoothness, uSmoothness, dist);\n    if (alpha <= 0.0)\n    {\n        fragColor = uTexture.eval(uTexture_size * ( uv));\n        return;\n    }\n    vec2 centerOffset = uv - vec2(0.5);\n    float distortionFactor = clamp(dist / (-max(boxHalfSizePx.x, boxHalfSizePx.y)), 0.0, 1.0);\n    float distortionGradient = pow(distortionFactor * uDistortionStrength, uDistortionSlope);\n    vec2 distortedUv = ((uv - vec2(0.5)) * (1.0 + ((uRefractiveIndex - 1.0) * distortionGradient))) + vec2(0.5);\n    vec2 caOffset = centerOffset * uChromaticAberration;\n    vec3 col;\n    col.x = uTexture.eval(uTexture_size * ( distortedUv + caOffset)).x;\n    col.y = uTexture.eval(uTexture_size * ( distortedUv)).y;\n    col.z = uTexture.eval(uTexture_size * ( distortedUv - caOffset)).z;\n    vec3 highlightColor = vec3(0.699999988079071044921875);\n    vec3 finalLight = vec3(0.0);\n    float glareBandHeight = boxHalfSizePx.y * 0.699999988079071044921875;\n    float topGlareFactor = smoothstep(0.0, (-glareBandHeight) * 4.0, p_1.y);\n    float bottomGlareFactor = smoothstep(0.0, glareBandHeight * 2.0, p_1.y);\n    float directionalGlare = (topGlareFactor + bottomGlareFactor) * 0.100000001490116119384765625;\n    float rimBand = smoothstep(-0.0, -8.0, dist) - smoothstep(-5.0, -25.0, dist);\n    float specularRim = rimBand * 0.039999999105930328369140625;\n    finalLight = highlightColor * (directionalGlare + specularRim);\n    col = mix(col, uGlassTint, vec3(uGlassAlpha));\n    col += finalLight;\n    vec4 glassColor = vec4(col, 1.0);\n    vec4 backgroundColor = uTexture.eval(uTexture_size * ( uv));\n    fragColor = clamp(mix(backgroundColor, glassColor, vec4(alpha)), vec4(0.0), vec4(1.0));\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 0,
        "columns": 1,
        "location": 0,
        "name": "uTexture",
        "rows": 1,
        "type": 12
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "uSize",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 2,
        "name": "uPadding",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 3,
        "name": "uCornerRadius",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 4,
        "name": "uSmoothness",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 5,
        "name": "uRefractiveIndex",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 6,
        "name": "uChromaticAberration",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 7,
        "name": "uDistortionStrength",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 8,
        "name": "uDistortionSlope",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 9,
        "name": "uGlassTint",
        "rows": 3,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 10,
        "name": "uGlassAlpha",
        "rows": 1,
        "type": 10
      }
    ]
  }
}